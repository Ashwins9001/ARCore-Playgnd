package com.example.databinding

import androidx.databinding.Bindable
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel

class MainViewModel : ViewModel(){
    //One way data-binding incase code gets changed due to btn-press
    val currentRandomFruitName : LiveData<String>
        get() = FakeRepository.currentRandomFruitName //access from pub property of cls, set var of ViewModel to it for XML changes
    //btn listener & var currentRandomFruitName ref directly in XML, thus viewmodel stores data and affects UI
    fun onChangeRandomFruitClick() = FakeRepository.changeCurrentRandomFruitName() //set onClick to get currentRandomFruitName & set it for obj

    //Two way data-binding
    //BR class gets generated by data binding to store all reactive vals
    //Observer classes react & notify when they see changes in observables
    //@Bindable applies to getter of an observable, then modifies BR field
    //Attaching view to changing data incase user changes it manually by input-text
    @Bindable
    val editTextContent = MutableLiveData<String>() //bind this to editText view of XML

    //set up cls property via constructor (same)
    private val _displayedEditTextContent = MutableLiveData<String>()
    //set up property that must be accessed through cls
    val displayedEditTextContent : LiveData<String> //pub val sent back as data to ViewModel
        get() = displayedEditTextContent //bind this to textView of XML
    fun onDisplayEditTextContentClick() {
        _displayedEditTextContent.value = editTextContent.value //on click listener, derive vals & change given LiveData, set textView to editText in XML
    }

    fun onSelectRandomEditTextFruit() {
        editTextContent.value = FakeRepository.getRandomFruitName()
    }
}

//App architecture way of designing app classes and relationships b/w them, follow MVVM here
//ViewModel holds data (LiveData) to be displayed to fragment/activity associated with it
//UI controller UI-based class such as activity/fragment that handles displaying views and taking user input
//ViewModel prepares data and determines when UI controller can access
//ViewModelFactory instantiates ViewModel obj w/ or w/ out constructors